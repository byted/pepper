<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="ch_setUpEnv">
    <title>Setting up your environment</title>
    <para>If you do not belong to the hardcore 'vi' developer community, you may want to use a
        developement environment and an IDE for developing your Pepper module. For that case we here
        describe how to set up your environment for the Eclipse IDE (see: <link
            xlink:href="http://download.eclipse.org">http://download.eclipse.org</link>). You also
        can stick to another IDE like NetBeans (see: <link xlink:href="www.netbeans.org/"
            >www.netbeans.org/</link>) but you should make sure that the OSGi framework is set up
        correctly for your IDE. In that case, skip the Eclipse specific parts.</para>
    <sect1 xml:id="sec_downloadEclipse">
        <title>Download and set up Eclipse</title>
        <para>Eclipse is available in several flavours e.g. for web developers, mobile developers,
            C++ developers etc.. We recommend the Eclipse Modeling Tools, since you might want to
            create or use a model for the format you want to support. For this tutorial, we used
            Eclipse juno, version 4.2 (see: <link
                xlink:href="http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junosr2"
                >http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junosr2</link>).
            Unfortunately, in this version Eclipse does not come with an integrated OSGi console
            anymore. It now uses the Apache Gogo Shell which is not part of the Eclipse
            distribution. Therefore we have to download the Equinox SDK from <link
                xlink:href="http://download.eclipse.org/equinox/"
                >http://download.eclipse.org/equinox/</link>, we used version 3.8.2 which is
            available on <link
                xlink:href="http://www.eclipse.org/downloads/download.php?file=/equinox/drops/R-3.8.2-201302041200/equinox-SDK-3.8.2.zip"
                >http://www.eclipse.org/downloads/download.php?file=/equinox/drops/R-3.8.2-201302041200/equinox-SDK-3.8.2.zip</link>.</para>
        <itemizedlist>
            <listitem>
                <para>Download the Eclipse IDE and unzip it to ECLIPSE_HOME (a folder of your
                    choice).</para>
            </listitem>
            <listitem>
                <para>Download the equinox sdk and unzip it to EQUINOX_SDK (a folder of your
                    choice).</para>
            </listitem>
            <listitem>
                <para>Copy all (not already contained) bundles (.jar) from EQUINOX_SDK/plugins
                    folder to ECLIPSE_HOME/plugins folder.</para>
            </listitem>
            <!-- 
            <listitem>
                <para>Download the log4j logging bundle from maven repository <link xlink:href="http://mvnrepository.com/artifact/log4j/log4j/1.2.16">http://mvnrepository.com/artifact/log4j/log4j/1.2.16</link>.</para>
            </listitem>
            <listitem>
                <para>Copy the log4j logging bundle to ECLIPSE_HOME/plugins.</para>
            </listitem>
             -->
        </itemizedlist>
    </sect1>
    <sect1 xml:id="sec_eclipseForSNP">
        <title>Making Eclipse ready for SaltNPepper</title>
        <itemizedlist>
            <listitem>
                <para>Download the latest Pepper distribution from <link
                        xlink:href="http://korpling.german.hu-berlin.de/saltnpepper/repository/saltNpepper_full/"
                        >http://korpling.german.hu-berlin.de/saltnpepper/repository/saltNpepper_full/</link></para>
            </listitem>
            <listitem>
                <para>Unzip the Pepper distribution to PEPPER_HOME.</para>
            </listitem>
            <listitem>
                <para>Copy all bundles (.jar files) from PEPPER_HOME/plugins to
                    ECLIPSE_HOME/dropins.</para>
            </listitem>
            <listitem>
                <para>Either copy all folders having the same name as the bundles (.jar files) from
                    PEPPER_HOME/plugins to a folder of your choice, or let them be where they are.
                    But in any way, let's call that location BUNDLE_RESOURCES/plugins for the
                    following steps.</para>
            </listitem>
        </itemizedlist>
    </sect1>
    <sect1 xml:id="sec_startingEclipse">
        <title>Starting Eclipse</title>
        <para>Now lets check wether Eclipse was set up correctly and is able to find all necessary
            bundles.</para>
        <itemizedlist>
            <listitem>
                <para>Start Eclipse. (When starting Eclipse, having no projects registered in your
                    workspace, a welcome tab may appears. Just close this tab and go on.)</para>
            </listitem>
            <listitem>
                <para>Open 'Plug-ins view' via 'Window --> Show View --> Others (see <xref
                        linkend="fig_showView"/>). </para>
                <figure xml:id="fig_showView">
                    <title/>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/showView.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
                <itemizedlist>
                    <listitem>
                        <para>Type in 'plug-ins' and choose 'Plug-ins' to open the corresponding view (see <xref linkend="fig_showView02"/>).</para>
                        <figure xml:id="fig_showView02">
                            <title/>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/showView2.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                    </listitem>
                    <listitem>
                        <para>In that view, you will find all OSGi bundles, which are accessable
                            from your Eclipse installation.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>Check wether all bundles from SaltNPepper are there. The main ones are <itemizedlist>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-exceptions.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-framework.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-logReader.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-modules.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-moduleTests.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-testEnvironment.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.pepper-workflow.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.salt-graph.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.salt-saltCommon.jar</para>
                        </listitem>
                        <listitem>
                            <para>de.hu_berlin.german.korpling.saltnpepper.salt-saltCore.jar</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
        </itemizedlist>
        <para>Congratulations, now you are done setting up your IDE.</para>
    </sect1>
    <sect1 xml:id="sec_letsRun">
        <title>Let's run</title>
        <para>Now we want to let the ghost out of the bottle and run the Pepper framework.</para>
        <itemizedlist>
            <listitem>
                <para>Select 'Run --> Run configurations...' (see <xref linkend="fig_runConfig01"
                    />).</para>
                <figure xml:id="fig_runConfig01">
                    <title/>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/runConfigurations.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>Select 'OSGi Framework', press right mouse button and select 'New' (see <xref
                        linkend="fig_runConfig02"/>).</para>
                <figure xml:id="fig_runConfig02">
                    <title/>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/runConfigurations2.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>

            <listitem>
                <para>Give your run configuration a name under 'Name:', (see <xref
                        linkend="fig_runConfig03"/> position A).</para>
                <figure xml:id="fig_runConfig03">
                    <title/>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/runConfigurations4.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>For not loading all available bundles, which could be more than 800 (see <xref
                        linkend="fig_runConfig03"/> position B), press the button 'Deselect All'
                    (see <xref linkend="fig_runConfig03"/> position C).</para>
                <note><para>This may take a while, so don't be feared, in general your computer is not frozen.</para></note>
            </listitem>
            <listitem>
                <para>Now, activate all necessary bundles for running Pepper. In 'type filter text'
                    (see <xref linkend="fig_runConfig03"/> position D) type in 'de.hu_berlin' and
                    you will see all bundles having this string in the package name. To active the
                    necessary bundles, click the box on the left of their name. Make sure that all
                    bundles you have copied from PEPPER_HOME are activated. These are at least the
                    following ones:</para>
                <itemizedlist>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-exceptions.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-framework.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-logReader.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-modules.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-moduleTests.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-testEnvironment.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.pepper-workflow.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.salt-graph.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.salt-saltCommon.jar</para>
                    </listitem>
                    <listitem>
                        <para>de.hu_berlin.german.korpling.saltnpepper.salt-saltCore.jar</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>There are some other bundles necessary for running Pepper to be
                    activated:</para><note><para>These packages also have to be select manually. Filtering them can even take a while.</para></note>
                <itemizedlist>
                    <listitem>
                        <para>org.eclipse.equinox.console</para>
                    </listitem>
                    <listitem>
                        <para>org.eclipse.equinox.ds</para>
                    </listitem>
                    <listitem>
                        <para>org.apache.felix.gogo.shell</para>
                    </listitem>
                    <listitem>
                        <para>org.apache.log4j</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>Since these are not all of the necessary bundles, we have to select some more,
                    but Eclipse now should be able to detect them automatically, by pressing the
                    button 'Add Required Bundles' (see <xref linkend="fig_runConfig03"/> position
                    E).</para>
                <note>
                    <para>In case of this button is disabled, remove the string from the
                        filter</para>
                </note>
                <para>Now some more bundles are added, on the right you can see the increased number
                    of currently selected bundles (see <xref linkend="fig_runConfig03"/> position
                    B).</para>
            </listitem>
            <listitem>
                <para>Since the start order of some bundles is important, set 'Start Level' of the
                    following bundles as follows.</para>
                <table frame="all">
                    <title>Sample Table</title>
                    <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colnum="1" colname="c1" colwidth="7.3*"/>
                        <colspec colnum="2" colname="c2" colwidth="1*"/>
                        <thead>
                            <row>
                                <entry>Bundles</entry>
                                <entry>Start Level</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>de.hu_berlin.german.korpling.saltnpepper.pepper-logReader</entry>
                                <entry>2</entry>
                            </row>
                            <row>
                                <entry>de.hu_berlin.german.korpling.saltnpepper.pepper-framework</entry>
                                <entry>5</entry>
                            </row>
                            <row>
                                <entry>de.hu_berlin.german.korpling.saltnpepper.pepper-testEnvironment</entry>
                                <entry>6</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <note>
                    <para>We assume that the 'Default Start Level' is set to 4.</para>
                </note>
            </listitem>
            <listitem>
                <para>Now we need to set an environment variable named 'PEPPER_TEST' to register
                    resources like configuration files of the bundles, if needed.</para>
                <orderedlist>
                    <listitem>
                        <para>Go to tab 'Environment' (see <xref linkend="fig_runConfig04"/>
                            position A).</para>
                        <figure xml:id="fig_runConfig04">
                            <title/>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/runConfigurations7.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                    </listitem>
                    <listitem>
                        <para>Press button 'New...' (see <xref linkend="fig_runConfig04"/> position
                            B).</para>
                    </listitem>
                    <listitem>
                        <para>Type in 'PEPPER_TEST' for name and the folder known as
                            BUNDLE_RESOURCES (without the 'plugins' subfolder) as value.</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>Press button 'Run' (see <xref linkend="fig_runConfig03"/> position F).</para>
            </listitem>
        </itemizedlist>
        <para> Now Pepper is running and shows all registered importers, exporters and
            manipulators. A screen like shown in <xref linkend="fig_runConfig03"/> comes up. </para>
        <note><para>The output can vary, depending on the modules you have registered and the version of the OSGi console. Eventually a lot of log messages are outputted as well.</para></note>
        <figure xml:id="fig_pepperHello01">
            <title/>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/pepper_hello.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>To make things easier, we provide a preconfigured file, which can be used for this, unfortunately this configuration is for Eclipse only.
            This file contains information for the run configurations of the <classname>pepper-testEnvironment</classname> project and can be found under
            <filename>https://korpling.german.hu-berlin.de/svn/saltnpepper/pepper/tags/pepper-XXX/pepper-testSuite/pepper-testEnvironment/pepper-testEnvironment.launch</filename> (where XXX is the version number). Just copy that file into your poject, update the view in your project or package explorer by pressing 'F5', right click that file and select 'run as...' --> 'pepper-testEnvironment'.
        </para>
        <para>To install further Pepper modules, follow the given instructions: <orderedlist>
                <listitem>
                    <para>Download a module of your choice from <link
                            xlink:href="http://korpling.german.hu-berlin.de/saltnpepper/repository/pepperModules/de/hu_berlin/german/korpling/saltnpepper/pepperModules/"
                            >http://korpling.german.hu-berlin.de/saltnpepper/repository/pepperModules/de/hu_berlin/german/korpling/saltnpepper/pepperModules/</link>
                        or any other source.</para>
                </listitem>
                <listitem>
                    <para>Unzip the file to a folder of your choice, let's call it MODULE_HOME</para>
                </listitem>
                <listitem>
                    <para>Copy the bundel (.jar file) to ECLIPSE_HOME/dropins</para>
                </listitem>
                <listitem>
                    <para>Copy the folder having the same name as the bundle (.jar file) to
                        BUNDLE_RESOURCES/plugins.</para>
                </listitem>
                <listitem>
                    <para>Select the downloaded module in your run configurations.</para>
                </listitem>
                <listitem>
                    <para>Press button 'Add required bundles' (see <xref linkend="fig_runConfig03"/>
                        position E).</para>
                </listitem>
                <listitem>
                    <para>To check if all bundle dependencies could be resolved, press 'Validate
                        Bundles'. (see <xref linkend="fig_runConfig03"/>)</para>
                </listitem>
            </orderedlist>
        </para>
    </sect1>
    <sect1 xml:id="sec_realRun">
        <title>Making a real run</title>
        <para>Now we want to start a real run using a workflow description file. To do so, we need a
            sample corpus and a sample workflow description file. The sample workflow description
            file specifies a workflow converting a corpus in paula to relANNIS. <note>
                <para>Make sure, that the PAULAImporter and the RelANNISExporter (or more precisely the PAULAModules and the RelANNISModules bundles) are registered in
                    your Eclipse installation (see 'plugins view' <xref
                        linkend="sec_startingEclipse"/>) and in your run configurations.</para>
            </note>
        </para>
        <itemizedlist>
            <listitem>
                <para>Download the sample corpus from <link
                        xlink:href="http://korpling.german.hu-berlin.de/saltnpepper/samples/corpora/pcc2.zip"
                        >http://korpling.german.hu-berlin.de/saltnpepper/samples/corpora/pcc2.zip</link>
                    and unzip it to SAMPLE_CORPUS.</para>
            </listitem>
            <listitem>
                <para>Create an environment variable named 'PEPPER_TEST_WORKFLOW_FILE' in your 'Run
                    configurations' and point it to SAMPLE_CORPUS/paula2relANNIS.pepperParams (see
                        <xref linkend="fig_runConfig04"/> for creating environment variables;
                    name='PEPPER_TEST_WORKFLOW_FILE',
                    value='SAMPLE_CORPUS/paula2relANNIS.pepperParams')</para>
            </listitem>
            <listitem>
                <para>Press 'Run'.</para>
            </listitem>
        </itemizedlist>
        <para>Now the Pepper test environment is set up, and Pepper does the conversion task.
        </para>
    </sect1>
    <sect1 xml:id="sec_maven">
        <title>Setting up maven</title>
        <para>As already mentioned, we used maven as lifecycle and dependency management tool. For
            the developement of your own modules, it would be very helpful, to also use maven. But
            you are free to use any other lifecycle management tool like ant (see <link
                xlink:href="http://ant.apache.org/">http://ant.apache.org/</link>), gradle (see
                <link xlink:href="http://www.gradle.org/">http://www.gradle.org/</link>) or
            none.</para>
        <para>If you are working with Netbeans, you can skip the rest of this section, because
            Netbeans already comes with an integrated maven. In the case that you are working with
            Eclipse, or even want to compile your Pepper module via the command line, you have to
            install maven. Therefore just follow the given instructions: <itemizedlist>
                <listitem>
                    <para>Download the latest maven distribution from <link
                            xlink:href="http://maven.apache.org/">http://maven.apache.org/</link>
                        (we used version 3.0.3).</para>
                </listitem>
                <listitem>
                    <para>Unzip the file to a folder of your choice and you will get a folder like
                        apache-maven-version in it. Lets call it MAVEN_HOME.</para>
                    <para>For Linux: Or install maven from your distribution repositories.</para>
                </listitem>
            </itemizedlist> Now, when switching to MAVEN_HOME/bin folder, you can run maven from the
            command line via calling: <programlisting>mvn</programlisting>
            </para>
            <para>For Windows: If you want to run mvn
            everywhere, write the path MAVEN_HOME/bin into your path environment variable (under
            Windows).</para>
        <para>For Linux: Maven should automatically be installed in the default directory if you use the Distribution repository (e.g. /bin or /usr/bin ) and thus be runnable.</para>
        <para>To enable maven in Eclipse you have to use a specific plugin called m2e. <itemizedlist>
                <listitem>
                    <para>Open the 'Eclipse Marketplace' via 'Help --> Eclipse Marketplace...' (see
                            <xref linkend="fig_marketPlace_m2e"/>)</para>
                    <figure xml:id="fig_marketPlace_m2e">
                        <title/>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/marketPlace_m2e.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
                <listitem>
                    <para>Type in 'm2e' in text box 'Find:' and press enter (see <xref
                            linkend="fig_marketPlace_m2e"/> position A).</para>
                </listitem>
                <listitem>
                    <para>The plugin 'Maven integration for Eclipse' should be displayed (you may have to scroll down). Click
                        "Install" to install that plugin (see <xref linkend="fig_marketPlace_m2e"/>
                        position B).</para>
                </listitem>
                <listitem>
                    <para>During the installation Eclipse asks you to agree to the license of this
                        plugin it may be recommended to restart Eclipse. Just follow the
                        instructions and go ahead.</para>
                </listitem>
                <listitem>
                    <para>After restarting Eclipse, the plugin should be installed. You can check
                        the installation, when clicking on 'File --> Import'. The dialog which opens
                        should contain an option/a folder named 'Maven'.</para>
                </listitem>
            </itemizedlist> If you are working with Eclipse and the command line simultaneously
            (which might be very helpful, since maven does not always run error-free in Eclipse), it
            might be useful, to synchronize the maven local repository of your m2e installation and
            the one of your maven installation. <itemizedlist>
                <listitem>
                    <para>Go to 'Window --> Preferences'.</para>
                </listitem>
                <listitem>
                    <para>Expand the entry 'Maven'.</para>
                </listitem>
                <listitem>
                    <para>Select the 'Installations' view.</para>
                </listitem>
                <listitem>
                    <para>Press the 'Add' button on the upper right and choose MAVEN_HOME (location of the maven installation, not of the maven repository).</para>
                </listitem>
            </itemizedlist> A Pepper module is created using the OSGi declarative service mechanism.
            If you don't know what this is and you don't want to know, never mind. We put the OSGi
            layer in the background so that you do not have to care about (as long as everything
            works fine ;-)). But therefore we used maven to configure the OSGi part. To enable the
            declarative service mechanism, we used some maven dependencies called
            'carrot-osgi-anno-scr'. Since there is no m2e adapter installed in Eclipse by default,
            you have to download a further plugin. <itemizedlist>
                <listitem>
                    <para>Go to the 'Eclipse Marketplace' via 'Help --> Eclipse
                        Marketplace...'.</para>
                </listitem>
                <listitem>
                    <para>Enter in 'Find:' the string 'CarrotGarden' and press enter.</para>
                </listitem>
                <listitem>
                    <para>The dialog will show the 'CarrotGarden SCR' plugin. Press the 'install'
                        button and follow the instructions. Eclipse may recommends to restart itself.</para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>

</chapter>
