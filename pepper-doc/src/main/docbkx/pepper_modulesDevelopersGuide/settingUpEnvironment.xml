<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="ch_setUpEnv">
    <title>Setting up your environment</title>
    <para>If you do not belong to the hardcore 'vi' developer community, you may want to use a
        developement environment and an IDE for developing your Pepper module. For that case we here
        describe how to set up your environment for the Eclipse IDE (see: <link
            xlink:href="http://download.eclipse.org">http://download.eclipse.org</link>). You also
        can stick to another IDE like NetBeans (see: <link xlink:href="www.netbeans.org/"
            >www.netbeans.org/</link>) but you should make sure that the OSGi framework is set up
        correctly for your IDE. In that case, skip the Eclipse specific parts.</para>
    <sect1 xml:id="sec_downloadEclipse">
        <title>Setting up Eclipse</title>
        <para>Eclipse is available in several flavours e.g. for web developers, mobile developers,
            C++ developers etc.. We recommend the Eclipse Modeling Tools, since you might want to
            create or use a model for the format you want to support. For this tutorial, we used
            Eclipse kepler, version 4.3.1 (see: <link
                xlink:href="http://www.eclipse.org/downloads/packages/eclipse-standard-431/keplersr1"
                />). </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Download Eclipse</para>
                </listitem>
                <listitem>
                    <para>Unzip the the eclipse file to a location of your choice, lets call it
                        ECLIPSE_HOME</para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>
    <sect1 xml:id="sec_eclipseForSNP">
        <title>Setting up SaltNPepper</title>
        <para>As well as the SaltNPepper project, Eclipse which is based on a Plug-In system called
            OSGi (see <link xlink:href="www.osgi.org/">www.osgi.org/</link>). Therefore all Plug-Ins
            (called bundles) of SaltNPepper can directly used in the Eclipse framework. To make the
            use of bundles as easy as possible, we provide a repository, where all necessary bundles
            are included.</para>
        <itemizedlist>
            <listitem>
                <para>Download file dropins.zip from <link
                        xlink:href="https://korpling.german.hu-berlin.de/saltnpepper/repository/eclipse/4.3/dropins.zip"
                        >https://korpling.german.hu-berlin.de/saltnpepper/repository/eclipse/4.3/dropins.zip</link>
                    and unzip the file to ECLIPSE_HOME</para>
            </listitem>
            <listitem>
                <para>Download file workspace.zip from <link
                        xlink:href="https://korpling.german.hu-berlin.de/saltnpepper/repository/eclipse/4.3/workspace.zip"
                        >https://korpling.german.hu-berlin.de/saltnpepper/repository/eclipse/4.3/workspace.zip</link>
                    and unzip the file to a location of your choice. Let's call it WORKSPACE.</para>
            </listitem>
            <listitem>
                <para>Open your Eclipse and set the workspace location to WORKSPACE</para>
                <itemizedlist>
                    <listitem>
                        <para>In case of you start Eclipse the first time, a menu pops up and asks
                            for a workspace location.</para>
                    </listitem>
                    <listitem>
                        <para>Otherwise use 'File --> Switch Workspace'</para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        <note><para>Sometimes, it happens, that Eclipse presents some weird error messages, when starting it the first time. In that case, it might help to restart it. You can do so via 'File --> Restart'</para></note>
        <para>Et voil√†, your done. Your Eclipse now should look very similar to figure <xref
                linkend="fig_eclipse"/>). <figure xml:id="fig_eclipse">
                <title>Eclipse</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="400px" fileref="images/eclipse.png"/>
                    </imageobject>
                </mediaobject>
            </figure> On the left, you can see all projects in your workspace, which is currently
            just one, the pepperModules-SampleModules project. When you open the project (by
            double-click), you can see all files and folder of the project. </para>
    </sect1>
    <sect1 xml:id="sec_letsRun">
        <title>Let's run</title>
        <para>To run a project in eclipse, you need a configuration of what should be run and how it
            should be run. This is called a run configuration.</para>
        <itemizedlist>
            <listitem>
                <para>To open the run configuration dialog, click on the small file on the right of
                    the 'play' symbol (see mark 1 in figure <xref linkend="fig_eclipse"/>).</para>
            </listitem>
            <listitem>
                <para>Choose menu entry 'Run Configurations'</para>
                <figure xml:id="fig_runConfig01">
                    <title>Run Configuration dialog</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata width="400px" fileref="images/runConfig01.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>Double-click on the entry 'OSGi Framework', a subentry named
                    'pepper-testEnvironment' will be opened. Double-click that entry.</para>
            </listitem>
            <listitem>
                <para>Now switch to the tab 'Environment'. You will find the definition of an
                    environment variable named 'PEPPER_TEST_WORKFLOW_FILE'. The value of this
                    variable determines, where to find the workflow description file of a Pepper
                    conversion process. In the workspace.zip file, you downloaded, we also included
                    a small test corpus (the pcc2 corpus) containing such a workflow description
                    file, to run a conversion of that corpus from the PAULA format to the ANNIS
                    format.Just point the variable to 'WORKSPACE/pcc2/paula2annis.pepperparams' by
                    clicking on the 'Edit' button, where WORKSPACE is your workspace.</para>
            </listitem>
            <listitem>
                <para>Now press the button 'Run' and Pepper starts to run in the test environment in
                    your Eclipse IDE.</para>
            </listitem>
        </itemizedlist>
    </sect1>
    <sect1 xml:id="sec_maven">
        <title>Setting up maven</title>
        <para>Since time is money and no one has the time to stuck in deep configuration work, we
            followed the 'convention over configuration' paradigm and tried to make it as easy as
            possible for you to develop, and bundle your Pepper module. Therefore, we make the use
            of a lifecycle management system maven (see: <link xlink:href="http://maven.apache.org/"
                >http://maven.apache.org/</link>). You are free to use any other system, or even
            none, but for maven, we already configured the most things you will need for your
            module.</para>
        <para>Unfortunatly, maven is not contained in theEclipse standard distribution and must be
            installed. We are sorry. But it is very simple, to do so. Just follow the listed
            instructions: </para>
        <itemizedlist>
            <listitem>
                <para>Open the 'Eclipse Marketplace' via 'Help --> Eclipse Marketplace...' (see
                        <xref linkend="fig_marketPlace_m2e"/>)</para>
                <figure xml:id="fig_marketPlace_m2e">
                    <title>Eclipse marketplace</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata width="200px" fileref="images/marketPlace_m2e.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>Type in 'maven' in text box 'Find:' and press enter (see <xref
                        linkend="fig_marketPlace_m2e"/> position A).</para>
            </listitem>
            <listitem>
                <para>The plugin 'Maven integration for Eclipse' should be displayed (you may have
                    to scroll down). Click "Install" to install that plugin (see <xref
                        linkend="fig_marketPlace_m2e"/> position B).</para>
            </listitem>
            <listitem>
                <para>During the installation Eclipse asks you to agree to the license of this
                    plugin and it may be recommended to restart Eclipse. Just follow the
                    instructions and go ahead.</para>
            </listitem>
            <listitem>
                <para>After restarting Eclipse, the plugin should be installed. You can check the
                    installation, when clicking on 'File --> Import'. The dialog which opens should
                    contain a folder named 'Maven'.</para>
            </listitem>
        </itemizedlist>
        <!-- 
        <para> A Pepper module is created using the OSGi declarative service mechanism. If you don't
            know what this is and you don't want to know, never mind. We put the OSGi layer in the
            background so that you do not have to care about (as long as everything works fine ;-)).
            We used maven to configure the OSGi part. To enable the declarative service mechanism,
            we used some maven dependencies called 'carrot-osgi-anno-scr'. Since there is no m2e
            adapter installed in Eclipse by default, you have to download a further plugin. <itemizedlist>
                <listitem>
                    <para>Go to the 'Eclipse Marketplace' via 'Help -> Eclipse
                        Marketplace...'.</para>
                </listitem>
                <listitem>
                    <para>Enter in 'Find:' the string 'CarrotGarden' and press enter.</para>
                </listitem>
                <listitem>
                    <para>The dialog will show the 'CarrotGarden SCR' plugin. Press the 'install'
                        button and follow the instructions. Eclipse may recommend to restart
                        itself.</para>
                </listitem>
            </itemizedlist>
        </para>
        -->
        <note>
            <para> If you are working with Eclipse and the command line simultaneously (which might
                be very helpful, since maven does not always run error-free in Eclipse), it might be
                useful, to synchronize the maven local repository of your m2e installation and the
                one of your maven installation. <itemizedlist>
                    <listitem>
                        <para>Go to 'Window --> Preferences'.</para>
                    </listitem>
                    <listitem>
                        <para>Expand the entry 'Maven'.</para>
                    </listitem>
                    <listitem>
                        <para>Select the 'Installations' view.</para>
                    </listitem>
                    <listitem>
                        <para>Press the 'Add' button on the upper right and choose MAVEN_HOME
                            (location of the maven installation, not of the maven
                            repository).</para>
                    </listitem>
                </itemizedlist>
            </para>
        </note>
    </sect1>

</chapter>
