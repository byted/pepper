<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Pepper</title>
        <subtitle>Developer's Guide for Pepper modules</subtitle>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Florian</firstname>
                    <surname>Zipser</surname>
                </personname>
                <email>saltnpepper@lists.hu-berlin.de</email>
            </author>
            <author>
                <orgname xml:id="org1">INRIA</orgname>
            </author>
            <author>
                <orgname xml:id="org2">SFB 632 Information Structure / D1 Linguistic
                    Database</orgname>
            </author>
            <author>
                <orgname xml:id="org3">Humboldt-Universität zu Berlin</orgname>
            </author>
            <author>
                <orgname xml:id="org4">Universität Potsdam</orgname>
            </author>
        </authorgroup>
        <copyright>
            <year>2012</year>
            <holder><xref linkend="org1"/>, <xref linkend="org2"/>, <xref linkend="org3"/>, <xref
                    linkend="org1"/>,<xref linkend="org4"/>, All rights reserved.</holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The aim of this document is to provide a helpful guide to create your own Pepper
            module, that can be plugged into the Pepper framework.</para>
        <para>We are trying to make things as easy to use as possible, but we are a non-profit
            project and we need your help. So please tell us if things are too difficult and help us
            improving the framework. </para>
        <para>You are even very welcome to help us improving this documentation by reporting bugs,
            requests for more information or by writing sections. Please write an email to
                <email>saltnpepper@lists.hu-berlin.de</email>. </para>
        <para>Have fun developing with SaltNPepper!</para>
    </preface>

    <chapter xml:id="ch_intro">
        <title>Introduction</title>
        <para>With SaltNPepper we provide two powerful frameworks for dealing with linguistically
            annotated data. SaltNPepper is an Open Source project developed at the Humboldt
            University of Berlin (see: <link xlink:href="http://www.hu-berlin.de/"
                >http://www.hu-berlin.de/</link>) and INRIA (Institut national de recherche en
            informatique et automatique, see: <link xlink:href="http://www.inria.fr/"
                >http://www.inria.fr/</link>). In linguistic research a variety of formats exists,
            but no unified way of processing them. To fill that gap, we developed a meta model
            called Salt which abstracts over linguistic data. Based on this model, we also developed
            the pluggable universal converter framework Pepper to convert linguistic data between
            various formats. </para>
        <para>Pepper is a container controlling the workflow of a conversion process, the conversion
            itself is done by a set of modules called Pepper modules mapping the linguistic data
            between a given format and Salt and vice versa. Pepper is a highly pluggable framework
            which offers the possibility to plug in new modules in order to incorporate further
            formats. The architecture of Pepper is flexible and makes it possible to benefit from
            all already existing modules. This means that when adding a new or previously unknown
            format Z to Pepper, it is automatically possible to map data between Z and all already
            supported formats A, B, C, … . A Pepper workflow consists of three phases: <orderedlist>
                <listitem>
                    <para>the import phase (mapping data from a given fromat to Salt),</para>
                </listitem>
                <listitem>
                    <para>the optional manipulation phase (manipulating or enhancing data in Salt)
                        and the</para>
                </listitem>
                <listitem>
                    <para>export phase (mapping data from Salt to a given format).</para>
                </listitem>
            </orderedlist> The three phase process makes it feasible to influence and manipulate
            data during conversion, for example by adding additional information or linguistic
            annotations, or by merging data from different sources.</para>
        <para>Since Pepper is a pluggable framework, we used an underlying framework called OSGi
            (see: <link xlink:href="http://www.osgi.org/">http://www.osgi.org/</link>) that provides
            such a functionality. OSGi is a mighty framework and has a lot of impact in the way of
            programming things in java. Because we do not want to force you to learn OSGi, when you
            just want to create a new module for pepper, we tried to hide the OSGi layer as good as
            possible. Therefore, and for the lifecycle management of such projects, we used another
            framework named maven (see: <link xlink:href="http://maven.apache.org/"
                >http://maven.apache.org/</link>). Maven is configured via an xml file called
            pom.xml, you will find it in all SaltNPepper projects and also in the root of the
            SampleModule project. Maven makes things easier for use especially in dealing with
            dependencies. </para>
        <para>The SaltNPepper framework also comes with an environment for a direct start up in
            Eclipse. for an easier development of a Pepper module. It further contains a test bed
            for checking simple consistency issues of Pepper modules. This test bed is based on
            JUnit (see: <link xlink:href="junit.org">junit.org</link>) and can easily be extended
            for a specific module test.</para>
        <para>In the following, <xref linkend="ch_setUpEnv"/> explains how to set up your
            environment to start developing your Pepper module and explains how to download and
            adopt a template module to your own needs. This module then is the base for your own
            module. In <xref linkend="sec_customization"/> we explain how to add properties to your
            module, so that the user can dynamically customize the behaviour of the mapping. <xref
                linkend="ch_documentation"/> shows the usage of a documentation template written in
            doocbook (see <link xlink:href="http://www.docbook.org/">http://www.docbook.org/</link>)
            to make a standard documentation for the user of your module. Since testing of software
            often is a pain in the back, the <classname>pepper-testSuite</classname> already comes
            with some predefined tests. They should save you some time. Last but not least, this
            documentation contains a FAQ. Since a FAQ lives of questions, if you have some, just
            help us increasing that part and send a mail to
                <email>saltnpepper@lists.hu-berlin.de</email>.</para>
        <sect1>
            <title>The sample</title>
            <para>Before we start, we want to introduce our sample implementation of a Pepper
                module. This guide will show the power of Pepper and in parts even of Salt along
                that sample module project. Therefore it contains sample implementations, which
                could be used as a template and a kind of an inspiration for your own project. So
                don't hesitate to override the specific parts. The project contains three modules,
                one of each kind: an importer, a manipulator and en exporter.The importer just
                imports a static corpus containing one super-corpus, two sub-corpora and four
                doucments. Here you can see how to create a corpus-structure and a document-structure<footnote>
                    <para>Salt differentiates between the corpus-structure and the
                        document-structure. The document-structure contains the primary data (data
                        sources) and the linguistic annotations. A bunch of such information is
                        grouped to a document (<classname>SDocument</classname> in Salt). The
                        corpus-structure now is a grouping mechanism to group several documents to a
                        corpus or sub-corpus (<classname>SCorpus</classname> in Salt).</para>
                </footnote>, as a shortcut to the Salt framework. The manipulator, traverses over
                the document-structure and prints out some information about it, like the
                frequencies of annotations, the number of nodes and edges and so on. What you can
                see here is how to access data and traverse the graph structure in the Salt
                framework. The exporter exports the corpus into a format named DOT, which can be
                used for visualization of the corpus. The main logic of that mapping is not
                contained in the exporter itself, since such a component is already part of the Salt
                framework. The exporter should just give an impression of how to deal with thre
                creation of the specific output files. Please note, that these modules are just
                samples and do not show the entire power of Salt or Pepper. For learning more about
                Salt, please read the Salt model guide or the Salt quick User's guide. Both are
                available on <link xlink:href="u.hu-berlin.de/saltnpepper"
                    >u.hu-berlin.de/saltnpepper</link>.</para>
        </sect1>
    </chapter>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="quickStart.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="codeIt.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testing.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="documentation.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="helpers.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="faq.xml"/>
</book>
