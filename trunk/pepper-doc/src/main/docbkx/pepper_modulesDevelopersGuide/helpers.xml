<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="ch_helpers">
    <title>some little helpers</title>
    <para/>
    <sect1>
        <title>xml extractor</title>
        <para>The <classname>XMLTagExtractor</classname> generates a dictionary of the xml
            vocabulary. The dictionary consists of xml tag names, xml namespaces and attribute names
            from a source file and generates a java interface and a java class as well. The
            interface contains the xml namespace declarations, the xml element and attribute names
            as fields (public static final Strings). The generated java class implements that
            interface and further extends the <classname>DefaultHandler2</classname> class, to read
            a xml file following the generated xml dictionary. </para>
        <para> This class can be very helpful, when creating <classname>PepperImporter</classname>
            or <classname>PepperExporter</classname> classes consuming or producing xml formats. In
            that case, a sample xml file (containing most or better all of the elements) can be used
            to extract all element names as keys for the implementation. </para>
        <para>For instance, the following xml
            file:<programlisting>
 &lt;sentence xml:lang="en">
   &lt;token pos="VBZ">Is&lt;/token>
   &lt;token pos="DT" lemma="this">this&lt;/token>
   &lt;token>example&lt;/token>
 &lt;/sentence>
 </programlisting>
            results in the following interface,  where INTERFACE_NAME is the name of the xml file:
            <programlisting>
 public interface INTERFACE_NAME{
   public static final String TAG_TOKEN= "token";
   public static final String TAG_SENTENCE= "sentence";
   public static final String ATT_LEMMA= "lemma";
   public static final String ATT_XML_LANG= "xml:lang";
   public static final String ATT_POS= "pos";
 }
 </programlisting>and
            in the following class:
            <programlisting>public class INTERFACE_NAME_Reader extends DefaultHandler2 
   implements INTERFACE_NAME{
   public void startElement(  String uri,
                              String localName,
                              String qName,
                              Attributes attributes)throws SAXException
   {
      if (TAG_TOKEN.equals(qName)){
      }else if (TAG_SENTENCE.equals(qName)){
      }
   }
}</programlisting>For
            generating the class and interface you can either run the extractor as a library in your
            code, as shown in the following
            snippet:<programlisting>XMLTagExtractor extractor= new XMLTagExtractor();
extractor.setXmlResource(input);
extractor.setJavaResource(output);
extractor.extract();</programlisting>or
            from the command line with the following
            call:<programlisting>java XMLTagExtractor.class -i XML_FILE -o OUTPUT_PATH             </programlisting>
        </para>
    </sect1>
</chapter>
