<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="ch_setUpEnv">
    <title>X minutes to run your first Pepper module</title>
    <para>If you do not belong to the hardcore 'vi' developer community, you may want to use a
        developement environment and an IDE for implementing your Pepper module. For that case we
        here describe how to set up your environment for the Eclipse IDE (see: <link
            xlink:href="http://download.eclipse.org">http://download.eclipse.org</link>). You also
        can stick to another IDE like NetBeans (see: <link xlink:href="www.netbeans.org/"
            >www.netbeans.org/</link>) but you should make sure that the OSGi framework is set up
        correctly for your IDE. In that case, skip the Eclipse specific parts.</para>
    <sect1 xml:id="sec_setUp">
        <title>Setting Up</title>
        <para>
            <orderedlist>
                <listitem>
                    <para>Download Eclipse <footnote>
                            <para>Eclipse is available in several flavours e.g. for web developers,
                                mobile developers, C++ developers etc.. We recommend the Eclipse
                                Modeling Tools, since you might want to create or use a model for
                                the format you want to support. In this documentation, we used
                                Eclipse kepler, version 4.3.1 (see: <link
                                    xlink:href="http://www.eclipse.org/downloads/packages/eclipse-standard-431/keplersr1"
                                />). </para>
                        </footnote></para>
                </listitem>
                <listitem>
                    <para>Unzip the Eclipse archive to a location of your choice, lets call it
                        ECLIPSE_HOME</para>
                </listitem>
                <listitem>
                    <para>Download the latest version of Pepper (<link
                            xlink:href="https://korpling.german.hu-berlin.de/saltnpepper/repository/saltNpepper_full/"
                            >https://korpling.german.hu-berlin.de/saltnpepper/repository/saltNpepper_full/</link>)</para>
                </listitem>
                <listitem>
                    <para>Unzip SaltNPepper to a location of your choice, let's call it
                        PEPPER_HOME.</para>
                </listitem>
                <listitem>
                    <para>Copy all files from PEPPER_HOME/plugins to ECLIPSE_HOME/dropins</para>
                </listitem>
                <listitem>
                    <para>When you now open Eclipse, a menu will pop up and asks for a workspace
                        location. Point the location to a folder of your choice. Let's call it
                        WORKSPACE. Now you have an empty Eclipse. <footnote>
                            <para>When starting Eclipse for the first time, the first you will see
                                is a welcome tab, just close this tab.</para>
                        </footnote></para>
                </listitem>
                <listitem>
                    <para>Since SaltNPepper uses maven (see: <link
                            xlink:href="http://maven.apache.org/">http://maven.apache.org/</link>)
                        for dependency and lifecycle management, it would make things much easier,
                        to install maven in your Eclipse environment.</para>
                </listitem>
                <listitem>
                    <para>Open the 'Eclipse Marketplace' via 'Help' --> 'Eclipse Marketplace...'
                        (see <xref linkend="fig_marketPlace_m2e"/>)</para>
                    <figure xml:id="fig_marketPlace_m2e">
                        <title>Eclipse marketplace</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata width="200px" fileref="images/marketPlace_m2e.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
                <listitem>
                    <para>Type in <emphasis role="italic">maven</emphasis> in text box 'Find:' and
                        press enter (see <xref linkend="fig_marketPlace_m2e"/>).</para>
                </listitem>
                <listitem>
                    <para>The plugin 'Maven integration for Eclipse' should be displayed (you may
                        have to scroll down). Click "Install" to install that plugin (see <xref
                            linkend="fig_marketPlace_m2e"/>).</para>
                </listitem>
                <listitem>
                    <para>During the installation Eclipse asks you to agree to the license of this
                        plugin and it may be recommended to restart Eclipse. Just follow the
                        instructions and go ahead.</para>
                </listitem>
                <listitem>
                    <para>For an easier start, we provide a sample project which could be used as a
                        template for your own Pepper modules. This project contains in importer, a
                        manipulator and an exporter. The sample project is available via the
                        versioning control system of Pepper and can be downloaded using SVN<footnote>
                            <para>For downloading the sample via SVN, you need an SVN client.
                                Clients are available for all main OS. Most linux distributions
                                already come with a command-line SVN client, also for Windows
                                command-line clients are available, but even the very nice graphical
                                client TortoiseSVN (<link xlink:href="http://tortoisesvn.net/"
                                    >http://tortoisesvn.net/</link>) is available.</para>
                        </footnote> with the command: <programlisting>svn export https://korpling.german.hu-berlin.de/svn/saltnpepper/
                       pepper/tags/VERSION/pepper-sampleModules/</programlisting>
                        <!-- later in github svn export https://github.com/aivarsk/scruffy/trunk/samples from Pepper project either in korpling svn or in github-->
                        where <emphasis role="italic">VERSION</emphasis> stands for a released
                        version of the Pepper framework. Download the project to a location of your
                        choice, let's call it SAMPLE_HOME.</para>
                </listitem>
                <listitem>
                    <para>Back in Eclipse, click on the menu item 'File' --> 'Import...'. When the
                        maven integration for Eclipse was set up correctly, you will find an entry
                        named maven in the popped up dialog.</para>
                </listitem>
                <listitem>
                    <para>Click the entry 'Existing Maven Projects' as shown in figure <xref
                            linkend="fig_eclipseImportDialogue"/>. </para>
                    <figure xml:id="fig_eclipseImportDialogue">
                        <title>Eclipse Import dialogue</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata width="200px" fileref="images/eclipse_ImportDialogue.png"
                                />
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
                <listitem>
                    <para>In the opening wizzard choose SAMPLE_HOME as location of your maven
                        project and click finish.</para>
                </listitem>
                <listitem>
                    <para>Now Eclipse should import your first Pepper module project. After all,
                        your Eclipse should look very similar to figure <xref linkend="fig_eclipse"
                        />). <figure xml:id="fig_eclipse">
                            <title>Eclipse</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata width="400px" fileref="images/eclipse.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure> On the left hand side, you can see all active projects in your
                        workspace (which currently is just the pepperModules-SampleModules project).
                        When you open the project (by double-clicking), you can see all files and
                        folders of this project. </para>
                </listitem>
            </orderedlist>
        </para>
    </sect1>
    <sect1 xml:id="sec_letsRun">
        <title>Let's have a first run</title>
        <para>To run a project in Eclipse, you need a configuration of what should be run and how it
            should be run. This is called a run configuration.</para>
        <orderedlist>
            <listitem>
                <para>Before you can run the sample module, you need to compile its sources. Since
                    Pepper is using maven, right click on the project and select 'Run as...' -->
                    'Maven Install'.<footnote>
                        <para>The project now should be compiled. If you cannot see the compilation
                            progress, you need to open the 'Console' view by clicking on
                            'Window'-->'Show View'-->'Console'</para>
                    </footnote></para>
            </listitem>
            <listitem>
                <para>To open the run configuration dialog, click on the small arrow on the right of
                    the 'play' symbol (see position 1 in figure <xref linkend="fig_eclipse"/>) and
                    choose menu entry 'Run Configurations...'. Alternative you can click on 'Run'-->
                    'Run Configurations...'.</para>
                <figure xml:id="fig_runConfig01">
                    <title>Run Configuration dialog</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata width="400px" fileref="images/runConfig01.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>Double-click on the entry 'OSGi Framework', a subentry named
                    'pepper-testEnvironment' will be opened (similar to figure <xref
                        linkend="fig_runConfig01"/>)<footnote>
                        <para>If this entry does not appear, open the file
                            'SAMPLE_HOME/src/test/resources/run_sampleProject.launch' by double
                            clicking</para>
                    </footnote>. Double-click on that entry.</para>
            </listitem>
            <listitem>
                <para>Now switch to the tab 'Environment'. You will find the definition of an
                    environment variable named 'PEPPER_TEST_WORKFLOW_FILE'. The value of this
                    variable determines, where to find the description file of a Pepper workflow
                    (see figure <xref linkend="fig_runConfig01"/>). The sample module comes with a
                    predfined workflow file at 'SAMPLE_HOME/src/test/resources/sample.pepperparams'.
                    In this workflow all three modules of the sample module project are in use: an
                    importer for importing a static corpus, a manipulator, to print out some
                    information about the corpus like annotation frequencies and an exporter to
                    export the corpus into dot format.<footnote>
                        <para>The dot format (see: <link
                                xlink:href="http://www.graphviz.org/content/dot-language"
                                >http://www.graphviz.org/content/dot-language</link>) is a format
                            for rendering graphs. This format can be converted with for instance the
                            GraphViz tool (see: <link xlink:href="http://www.graphviz.org/"
                                >http://www.graphviz.org/</link>) into a svg, png or another
                            graphical format.</para>
                    </footnote>. </para>
                <para>Replace the entry with an absolute path to that file.</para>
            </listitem>
            <listitem>
                <para>For logging, Pepper uses the SLF4J framework (see: <link
                        xlink:href="http://www.slf4j.org/">http://www.slf4j.org/</link>). Switch to
                    tab 'Arguments' and type in in text box vm arguments the flag
                    '-Dlogback.configurationFile=SAMPLE_HOME/src/test/resources/logback_test.xml'.
                    Make sure to replace SAMPLE_HOME with an absolute path.</para>
            </listitem>
            <listitem>
                <para>Now press the button 'Run'.</para>
            </listitem>
            <listitem>
                <para>In optimal case everything is fine and Pepper should welcome you and start the
                    conversion producing some outputs to standard out. So what has happend? <orderedlist>
                        <listitem>
                            <para>The framework starts and notifies about the registered modules,
                                which are some more, than just our sample modules. This is because
                                you copied all modules to the Eclipse dropin path.</para>
                        </listitem>
                        <listitem>
                            <para>Pepper lists the workflow as defined in the workflow file.</para>
                        </listitem>
                        <listitem>
                            <para>The SampleImporter imports a predefined corpus and logs some
                                status messages to its progress.</para>
                        </listitem>
                        <listitem>
                            <para>The SampleManipulator outputs some statistcal information about
                                that imported corpus like, how many nodes and relations are
                                contained. Which annotations are used and in which frequency they
                                occur.</para>
                        </listitem>
                        <listitem>
                            <para>The SampleExporter exports that corpus in dot format to the path
                                'SAMPLE_HOME/target/sampleModuleOutput'.</para>
                        </listitem>
                    </orderedlist></para>
            </listitem>
        </orderedlist>
    </sect1>
    <sect1>
        <title>Let's give the baby a name</title>
        <para>... and configure the project. Configuring means, to adapt the default configurations
            to your specific project needs like the name of your project, its purpose, the name of
            your organization and so on.</para>
        <orderedlist>
            <listitem>
                <para><emphasis role="bold">project structure</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>Rename the sample project to a name of your choice like
                            'pepperModules-MyModules' (when working with Eclipse, right click on the
                            project name and choose the menu entry "Refactor" -->
                            "Rename...")</para>
                    </listitem>
                    <listitem>
                        <para>Rename the packages (when working with Eclipse, right click on the
                            package name and choose the menu entry "Refactor" -->
                            "Rename...")</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis role="bold">pom.xml</emphasis></para>
                <para>Open the pom.xml in the sampel project by double clicking on it. A specific
                    editor the 'POM editor' will open. On the bottom, a set of tabs is visible,
                    choose the tab 'pom.xml'. An xml editor will open. The following steps
                    correspond to one TODO entry in the file.</para>
                <itemizedlist>
                    <listitem>
                        <para>Change the "groupId" to the name of your working group
                            (conventionally, the groupId is the same as the package name). You will
                            find the entry under '/project/groupId'.</para>
                    </listitem>
                    <listitem>
                        <para>Change the "artifactId" (to the module name). You will find the entry
                            under '/project/artifactId'.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis role="bold">java code</emphasis></para>

                <para>We recommend to delete the modules you do not want to implement for this time
                    and just to keep the one(s) you are currently needing<footnote>
                        <para>Otherwise you project will mess up with non-functional modules.</para>
                    </footnote>.</para>
                <itemizedlist>
                    <listitem>
                        <para>Change the name of the module, for instance to <emphasis role="italic"
                                >MyImporter</emphasis>, <emphasis role="italic"
                                >MyExporter</emphasis> etc. We recommend to use the formats name and
                            the ending Importer, Exporter or Manipulator.<footnote>
                                <para>Renaming the modules is important, when you want to use your
                                    modules together with others in Pepper. A user will not find
                                    your module, when every module has the name
                                    SampleImporter.</para>
                            </footnote></para>
                    </listitem>
                    <listitem>
                        <para>Change the components name<footnote>
                                <para>a component here is an OSGi service component (for more
                                    details see <link
                                        xlink:href="http://wiki.osgi.org/wiki/Declarative_Services"
                                        >http://wiki.osgi.org/wiki/Declarative_Services</link>)</para>
                            </footnote>, for instance use the classes name and add 'Component' to it
                            (e.g. <emphasis role="italic">MyImporterComponent</emphasis>) like in
                            the following example.
                            <programlisting>@Component(name="MyImporterComponent", 
           factory="PepperImporterComponentFactory")
public class MyImporter extends PepperImporterImpl 
                            implements PepperImporter</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </orderedlist>
        <para>That have been all required changes to be made. But as you might have seen, a pom.xml
            contains a lot more entries to describe your projects. Some of these entries are very
            useful, depending on the maven modules you want to use. Here we shortly describe how to
            adapt the optional entries, we have used in the sample project. You can also do the
            following adaptions later and skip them for now.</para>

        <itemizedlist>
            <listitem>
                <para>Modify the description: Write what the module is supposed to do. You will find
                    the entry under '/project/description'.</para>
            </listitem>
            <listitem>
                <para>Change the project homepage to the url of your project. You will find the
                    entry under '/project/url'.</para>
            </listitem>
            <listitem>
                <para>Change the issue tracker to the one you are using, in case that you do not use
                    any one, remove this entry. You will find the entry under
                    '/project/issueManagement'.</para>
            </listitem>
            <listitem>
                <para>Change the continuous integration management system to the one you are using,
                    in case that you do not use any one, remove this entry. You will find the entry
                    under '/project/ciManagement'.</para>
            </listitem>
            <listitem>
                <para>Change the inception year to the current year. You will find the entry under
                    '/project/inceptionYear'.</para>
            </listitem>
            <listitem>
                <para>Change the name of the organization to the one you are working for. You will
                    find the entry under '/project/organization'.</para>
            </listitem>
            <listitem>
                <para>Modify the scm information or remove them (the scm specifies the location of
                    your versioning repository like SVN, GIT, CVS etc.). You will find the entry
                    under '/project/scm'.</para>
            </listitem>
            <listitem>
                <para>Change the connection to the tags folder of your scm, what you can see here is
                    the subversion connection for the pepperModules-SampleModules project. You will
                    find the entry under
                    '/project/build/plugins/plugin/configuration/tagBase'.</para>
            </listitem>
            <listitem>
                <para>If your module needs some 3rd party maven dependencies add them to the
                    dependencies section. (adding 3rd party dependencies is necessary to resolve
                    them via maven). You will find the entry under '/project/dependencies'.</para>
            </listitem>
            <listitem>
                <para>Sometimes it is necessary to include libraries, which are not accessible via a
                    maven repository and therefore can not be resolved by maven. In that case we
                    recommend, to create a 'lib' folder in the project directory and to copy all the
                    libraries you need into it. Unfortunatly, you have register them twice, first
                    for maven and second for OSGi.</para>
                <para>To register such a library to maven, you need to install them to your local
                    maven repository. You can do that with:
                    <programlisting>
mvn install:install-file -Dfile=JAR_FILE -DgroupId=GROUP_ID \
-DartifactId=ARTIFACT_ID -Dversion=VERSION -Dpackaging=PACKAGING
                    </programlisting>
                    Now you need to add the library as a dependency to your pom. The following
                    snippet shows an example:
                    <programlisting>
&lt;dependency>
  &lt;groupId>GROUP_ID&lt;/groupId>
  &lt;artifactId>ARTIFACT_ID&lt;/artifactId>
  &lt;version>VERSION&lt;/version>
&lt;/dependency>
                    </programlisting>
                </para>
                <para>To make them accessible for OSGi, add them to the bundle-classpath of the
                    plugin named 'maven-bundle-plugin'. You will find the entry under
                    '/project/build/plugins/plugin[artifactId/text()=
                    'maven-bundle-plugin']/configuration/instructions/Bundle-ClassPath'. You further
                    need to add them to a second element named include-resource, which you will find
                    under '/project/build/plugins/plugin[artifactId/text()=
                    'maven-bundle-plugin']/configuration/instructions/Include-Resource'. The
                    following snippet gives an example:
                    <programlisting>&lt;Bundle-ClassPath>.,{maven-dependencies}, lib/myLib.jar&lt;/Bundle-ClassPath>
&lt;Include-Resource>{maven-resources}, LICENSE, NOTICE, 
lib/myLib.jar=lib/myLib.jar&lt;/Include-Resource>
                    </programlisting>
                    You include libraries not handled by maven, i.e. jar files, by setting the
                    bundle-path and extending the include-resources tag.
                    "/project/build/plugins/plugin[artifactId/text()=
                    'maven-bundle-plugin']/configuration/instructions/Include-Resource"</para>
            </listitem>
        </itemizedlist>
    </sect1>
    <sect1>
        <title>Let's have a second run</title>
        <para>Since your project's configuration is now adapted to your needs, you need to
            re-compile the sources. Right click on the project and select 'Run as...' --> 'Maven
            Install'. After renaming the project in Eclipse and the pom.xml, you need to adapt the
            'Run configuartions'. <orderedlist>
                <listitem>
                    <para>In tab 'Bundles' you need to select the bundle again (having the new
                        name).</para>
                </listitem>
                <listitem>
                    <para>In the tab 'Arguments' you need to adapt the reference to the SLF4J
                        configuration file, by replacing the folder SAMPLE_HOME with the new
                        projects name
                        (-Dlogback.configurationFile=SAMPLE_HOME/src/test/resources/logback_test.xml).</para>
                </listitem>
                <listitem>
                    <para>And the same goes for 'Environment', where you have to adapt the location
                        of the WORKFLOW_DESCRIPTION_FILE reference.</para>
                </listitem>
            </orderedlist>
        </para>
        <para>Pepper also needs to know about the name change of the modules, therefore you need to
            adapt the workflow file under 'SAMPLE_HOME/src/test/resources/sample.pepperparams'. <orderedlist>
                <listitem>
                    <para>Change the name of the modules and/or the format descriptions.</para>
                </listitem>
                <listitem>
                    <para>In case you have removed some modules, delete them from the wokflow
                        file.</para>
                </listitem>
            </orderedlist>
        </para>
        <para> Now your own Pepper module hopefully is able to run inside the Eclipse framework. If
            not please check the SaltNPepper homepage under <link
                xlink:href="u.hu-berlin.de/saltnpepper">u.hu-berlin.de/saltnpepper</link> or write
            an e-mail to <email>saltnpepper@lists.hu-berlin.de</email>. </para>
        <para>For creating a deliverable assembly of your project, to be plugged into the Pepper
            framework. Open a command line and run:
            <synopsis>
            mvn clean install assembly:single
        </synopsis> Or use
            Eclipse by right clicking the project and then click 'Run as' --> 'Maven build...'. In
            form field 'Goals' type in 'clean install assembly:single'.</para>
        <para> This will create a zip file in the target folder of your project
            'SAMPLE_PROJECT/target/distribution', which can simply be plugged into Pepper via
            extracting its content to the plugin folder of Pepper 'PEPPER_HOME/plugins'. <note>
                <para>If the command mvn was not found, make sure you have installed maven even in
                    your system not only in Eclipse. For more information see the maven site <link
                        xlink:href="http://maven.apache.org/"
                    >http://maven.apache.org/</link>.</para>
            </note>
        </para>
    </sect1>
    <sect1>
        <title>Congratulations</title>
        <para>Now you are done, a new Pepper module is running under your name and you can provide
            it for download. So the work is done, or isn't it? Unfortunatly not, now we come to the
            hardest part ;-), the coding of your tasks. But don't be afraid, the next chapter is
            supposed to guide you through the jungle and to not losing your path.</para>
    </sect1>
</chapter>
