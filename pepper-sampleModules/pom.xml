<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- TODO /1/: change the groupId to the name of your module and remove 
		the comments, it is just outcommented for not producing warnings -->
	<!-- <groupId></groupId> -->
	<!-- TODO /2/: change the artifactId to the name of your module -->
	<artifactId>pepperModules-SampleModules</artifactId>
	<name>${project.groupId}.${project.artifactId}</name>
	<packaging>bundle</packaging>
	<properties>
		<maven-bundle-plugin.version>2.3.7</maven-bundle-plugin.version>
		<maven-release-plugin.version>2.1</maven-release-plugin.version>
		<maven-site-plugin.version>3.4</maven-site-plugin.version>
		<maven-project-info-reports-plugin.version>2.4</maven-project-info-reports-plugin.version>
		<maven-resources-plugin.version>2.5</maven-resources-plugin.version>
	</properties>
	<distributionManagement>
		<repository>
			<id>korpling</id>
			<name>korpling maven repo</name>
			<url>file:///srv/www/maven2/</url>
			<!-- <url>scpexe://korpling.german.hu-berlin.de/srv/www/maven2/</url> -->
		</repository>
	</distributionManagement>
	<repositories>
		<repository>
			<id>korpling</id>
			<name>korpling maven repo</name>
			<url>http://korpling.german.hu-berlin.de/maven2</url>
		</repository>
	</repositories>
	<!-- Declares this project to be an extension of the project pepper-parentModule. 
		The parent project for instance contains all dependencies necessary for using 
		the SaltNPepper environment (all Pepper projects and all Salt projects). -->
	<parent>
		<groupId>org.corpus-tools</groupId>
		<artifactId>pepper-parentModule</artifactId>
		<version>3.0.0-SNAPSHOT</version>
		<relativePath>../pepper-parentModule/pom.xml</relativePath>
	</parent>
	<description>This project provides three sample modules for Pepper. It provides an importer, an exporter and a manipulator. The project can be used as a container for creating new PepperModules. One just have to override the areas marked with TODO.</description>
	<!-- TODO /4/ change the project homepage to the url of your project. -->
	<url>https://korpling.german.hu-berlin.de/p/projects/peppermodules-samplemodules</url>
	<!-- TODO /5/ change the issue tracker to the one you are using, in case 
		of you do not use any one, remove this entry. -->
	<!-- <issueManagement> <system></system> <url></url> </issueManagement> -->
	<!-- TODO /6/ change the continuous integration management system to the 
		one you are using, in case of you do not use any one, remove this entry. -->
	<ciManagement>
		<system>Jenkins</system>
		<url>https://korpling.german.hu-berlin.de/jenkins/</url>
	</ciManagement>
	<!-- TODO /7/ change the inception year to the current year. -->
	<inceptionYear>2010</inceptionYear>
	<!-- TODO /8/ change the name of the organization to the one you are working 
		for. -->
	<organization>
		<name>Humboldt-Universit√§t zu Berlin, INRIA</name>
	</organization>
	<!-- TODO /9/ change the connection to the trunk folder of your scm, what 
		you can see here is the subversion connection for the pepperModules-SampleModules 
		project -->
	<!-- <scm> <developerConnection></developerConnection> <url></url> </scm> -->

	<dependencies>
		<!-- TODO /10/ ... put here all the dependencies you need, which are not 
			already included in the parent project... -->
	</dependencies>
	<build>
		<plugins>
			<!-- start: Plugin for automatic releasing -->
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>perform</goal>
						</goals>
						<configuration>
							<!-- TODO /11/ change the connection to the tags folder of your scm, 
								what you can see here is the subversion connection for the pepperModules-SampleModules 
								project -->
							<pomFileName>pepperModules-SampleModules/pom.xml</pomFileName>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<releaseProfiles>release</releaseProfiles>
					<goals>package assembly:single deploy</goals>
				</configuration>
			</plugin>
			<!-- start: creation of bundle jar This plugIn creates a META-INF folder 
				if not present and adds the entries into the MANIFEST.MF file required for 
				OSGi. It also creates an OSGI-INF folder necessary for using service-components 
				in OSGi. -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>bundle</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<manifestLocation>${META-INF}</manifestLocation>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<instructions>
						<Bundle-Name>${project.artifactId}</Bundle-Name>
						<Bundle-SymbolicName>${project.groupId}.${project.artifactId};singleton:=true</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<Bundle-RequiredExecutionEnvironment>JavaSE-${java.version}</Bundle-RequiredExecutionEnvironment>
						<Service-Component>${allServiceComponents}</Service-Component>
						<Include-Resource>{maven-resources}, LICENSE, NOTICE</Include-Resource>
						<!-- TODO /13/ In case of you want to add not mavenized 3rd party libraries, 
							put the into the project structure under path RESOURCE_PATH and fullfill 
							the following two entries. The alias RESOURCE_ALIAS can be any String Don't 
							forget to remove the <Include-Resource> tag above. <Bundle-ClassPath>.,{maven-dependencies}, 
							RESOURCE_ALIAS</Bundle-ClassPath> <Include-Resource>{maven-resources}, LICENSE, 
							NOTICE, RESOURCE_ALIAS=RESOURCE_PATH</Include-Resource> -->
					</instructions>
				</configuration>
			</plugin>
			<!-- end: creation of bundle jar -->

			<!-- start: maven site plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${maven-site-plugin.version}</version>
				<configuration>
					<reportPlugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-project-info-reports-plugin</artifactId>
							<version>${maven-project-info-reports-plugin.version}</version>
							<configuration>
								<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
							</configuration>
							<reports>
								<report>index</report>
								<report>summary</report>
								<report>license</report>
							</reports>
						</plugin>
					</reportPlugins>
				</configuration>
			</plugin>
			<!-- end: maven site plugin -->
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<!-- generate a jar for sources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>${maven-source-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<phase>verify</phase>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Generates a Javadoc -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${maven-javadoc-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- The Maven GPG plugin is used to sign the components -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${maven-gpg-plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
